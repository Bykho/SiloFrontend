{"ast":null,"code":"var _jsxFileName = \"/Users/nicodevelopment/Desktop/SiloFrontend/src/frontend/components/EditInPortfolio.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './editInPortfolio.module.css';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditInPortfolio = ({\n  project,\n  projectField,\n  project_id,\n  updateProject\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [newValue, setNewValue] = useState(project[projectField]);\n  const [error, setError] = useState('');\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n  const handleInputChange = e => {\n    setNewValue(e.target.value);\n  };\n  const handleSubmit = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${config.apiBaseUrl}/updateProject/${project_id}/${projectField}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [projectField]: newValue\n        })\n      });\n      if (response.ok) {\n        updateProject(projectField, newValue);\n        setIsEditing(false);\n        setError('');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Update failed');\n      }\n    } catch (error) {\n      setError('Error during update: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.editContainer,\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newValue,\n        onChange: handleInputChange,\n        className: styles.editInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: styles.submitButton,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.error,\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleEditClick,\n      className: styles.editButton,\n      children: \"Edit?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(EditInPortfolio, \"ki1X3ixoGyxICTLnrji+kK+qTl8=\");\n_c = EditInPortfolio;\nexport default EditInPortfolio;\nvar _c;\n$RefreshReg$(_c, \"EditInPortfolio\");","map":{"version":3,"names":["React","useState","styles","config","jsxDEV","_jsxDEV","EditInPortfolio","project","projectField","project_id","updateProject","_s","isEditing","setIsEditing","newValue","setNewValue","error","setError","handleEditClick","handleInputChange","e","target","value","handleSubmit","token","localStorage","getItem","response","fetch","apiBaseUrl","method","headers","body","JSON","stringify","ok","errorData","json","message","className","editContainer","children","type","onChange","editInput","fileName","_jsxFileName","lineNumber","columnNumber","onClick","submitButton","editButton","_c","$RefreshReg$"],"sources":["/Users/nicodevelopment/Desktop/SiloFrontend/src/frontend/components/EditInPortfolio.js"],"sourcesContent":["\n\n\n\nimport React, { useState } from 'react';\nimport styles from './editInPortfolio.module.css';\nimport config from '../config'\n\n\nconst EditInPortfolio = ({ project, projectField, project_id, updateProject }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [newValue, setNewValue] = useState(project[projectField]);\n  const [error, setError] = useState('');\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const handleInputChange = (e) => {\n    setNewValue(e.target.value);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${config.apiBaseUrl}/updateProject/${project_id}/${projectField}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ [projectField]: newValue })\n      });\n      if (response.ok) {\n        updateProject(projectField, newValue);\n        setIsEditing(false);\n        setError('');\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Update failed');\n      }\n    } catch (error) {\n      setError('Error during update: ' + error.message);\n    }\n  };\n\n  return (\n    <div className={styles.editContainer}>\n      {isEditing ? (\n        <div>\n          <input\n            type=\"text\"\n            value={newValue}\n            onChange={handleInputChange}\n            className={styles.editInput}\n          />\n          <button onClick={handleSubmit} className={styles.submitButton}>\n            Submit\n          </button>\n          {error && <div className={styles.error}>{error}</div>}\n        </div>\n      ) : (\n        <div onClick={handleEditClick} className={styles.editButton}>\n          Edit?\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EditInPortfolio;\n\n\n\n\n"],"mappings":";;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,MAAM,MAAM,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG9B,MAAMC,eAAe,GAAGA,CAAC;EAAEC,OAAO;EAAEC,YAAY;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAACM,OAAO,CAACC,YAAY,CAAC,CAAC;EAC/D,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMiB,eAAe,GAAGA,CAAA,KAAM;IAC5BL,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMM,iBAAiB,GAAIC,CAAC,IAAK;IAC/BL,WAAW,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGzB,MAAM,CAAC0B,UAAU,kBAAkBpB,UAAU,IAAID,YAAY,EAAE,EAAE;QAC/FsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUP,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE,CAAC1B,YAAY,GAAGM;QAAS,CAAC;MACnD,CAAC,CAAC;MACF,IAAIa,QAAQ,CAACQ,EAAE,EAAE;QACfzB,aAAa,CAACF,YAAY,EAAEM,QAAQ,CAAC;QACrCD,YAAY,CAAC,KAAK,CAAC;QACnBI,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,MAAM;QACL,MAAMmB,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCpB,QAAQ,CAACmB,SAAS,CAACE,OAAO,IAAI,eAAe,CAAC;MAChD;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,QAAQ,CAAC,uBAAuB,GAAGD,KAAK,CAACsB,OAAO,CAAC;IACnD;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKkC,SAAS,EAAErC,MAAM,CAACsC,aAAc;IAAAC,QAAA,EAClC7B,SAAS,gBACRP,OAAA;MAAAoC,QAAA,gBACEpC,OAAA;QACEqC,IAAI,EAAC,MAAM;QACXpB,KAAK,EAAER,QAAS;QAChB6B,QAAQ,EAAExB,iBAAkB;QAC5BoB,SAAS,EAAErC,MAAM,CAAC0C;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACF3C,OAAA;QAAQ4C,OAAO,EAAE1B,YAAa;QAACgB,SAAS,EAAErC,MAAM,CAACgD,YAAa;QAAAT,QAAA,EAAC;MAE/D;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRhC,KAAK,iBAAIX,OAAA;QAAKkC,SAAS,EAAErC,MAAM,CAACc,KAAM;QAAAyB,QAAA,EAAEzB;MAAK;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,gBAEN3C,OAAA;MAAK4C,OAAO,EAAE/B,eAAgB;MAACqB,SAAS,EAAErC,MAAM,CAACiD,UAAW;MAAAV,QAAA,EAAC;IAE7D;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrC,EAAA,CA3DIL,eAAe;AAAA8C,EAAA,GAAf9C,eAAe;AA6DrB,eAAeA,eAAe;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}